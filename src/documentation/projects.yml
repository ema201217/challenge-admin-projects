paths:
  /projects:
    # GET
    get:
      security:
      - bearerAuth: []  
      tags:
        - Projects
      description: "Service to retrieve all projects"
      parameters:
        - in: query
          name: page
          description: "The page number"
          schema:
            type: integer
            example: 1
        - in: query
          name: count
          description: "The count number"
          schema:
            type: integer
            example: 10
      responses:
        200:
          $ref: "#/components/responses/getAllProjects"

        403:
          $ref: "#/components/responses/unauthorizedError"

        500:
          $ref: "#/components/responses/serverError"
    # POST
    post:
      security:
      - bearerAuth: []  
      tags:
        - Projects
      description: "Add a new project to DB"
      requestBody:
        description: "Request with values"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/projectPost"
      responses:
        201:
          $ref: "#/components/responses/projectCreatedSuccessfully"

        422:
          $ref: "#/components/responses/projectCreatedValidationError"

        500:
          $ref: "#/components/responses/serverError"

  /projects/{id}:
    # PATCH
    patch:
      security:
      - bearerAuth: []  
      tags:
        - Projects
      description: "This endpoint is in charge of making an update of the selected project"
      parameters:
        - in: path
          name: id
          description: "The id of the project that needs to be updated"
          required: true
          schema:
            type: integer
            example: 5
      requestBody:
        description: "Project Update"
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/projectUpdate"
      responses:
        200:
          $ref: "#/components/responses/projectUpdatedSuccessfully"
        404:
          $ref: "#/components/responses/projectNotFound"
        500:
          $ref: "#/components/responses/serverError"

    # DELETE
    delete:
      security:
      - bearerAuth: []  
      tags:
        - Projects
      description: "This endpoint will delete the project that corresponds with the chooser id"
      parameters:
        - in: path
          name: id
          description: "The id of the project you want to delete"
          required: true
          schema:
            type: integer
            example: 6
      responses:
        200:
          $ref: "#/components/responses/projectDeletedSuccessfully"
        404:
          $ref: "#/components/responses/projectNotFound"
        500:
          $ref: "#/components/responses/serverError"
    # GET
    get:
      security:
      - bearerAuth: []  
      tags:
        - Projects
      description: "This endpoint is for the project detail"
      parameters:
        - in: path
          name: id
          description: "Project ID"
          required: true
          schema:
            type: integer
            example: 6
      responses:
        200:
          $ref: "#/components/responses/projectDetailSuccessfully"
        404:
          $ref: "#/components/responses/projectNotFound"
        500:
          $ref: "#/components/responses/serverError"

  # COMPONENTS
components:
  # SCHEMAS
  schemas:
    projectPost:
      properties:
        name:
          description: "Name of the project"
          type: string
          example: "Project number 1"
        description:
          description: "Description of the project"
          type: string
          example: "Description project number 1"
        status:
          description: "status of the project | 1 = enabled - 2 = disabled"
          type: integer
          example: 1
    
    projectUpdate:
      properties:
        name:
          description: "Name of the project"
          type: string
          example: "project number ONE"
        description:
          description: "Description of the project"
          type: string
          example: "description project number ONE"
        status:
          description: "Status of the project | 1 = enabled - 2 = disabled"
          type: integer
          example: 2
    
    projectFormdata:
      type: object
      properties:
        name:
          description: "Name of the project"
          type: string
          example: "project number 1"
        description:
          description: "Description of the project"
          type: string
          example: "description project number 1"
        status:
          description: "Status of the project | 1 = enabled - 2 = disabled"
          type: integer
          example: 1

  # Responses
  responses:
    # ( Project - responses )
    projectCreatedSuccessfully:
      description: "Project created successfully"
      content:
        application/json:
          schema:
            properties:
              ok:
                type: boolean
                
              msg:
                type: string
                example: Created 'nameProject' project

    projectCreatedValidationError:
      description: "Validation errors"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok: 
                type: boolean
                example: false
              errors:
                type: array
                example: []
                items:
                  properties:
                    msg:
                      type: string
                    param:
                      type: string
    
    serverError:
      description: "Server error"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean 
                example: false
              msg:
                type: string

    projectUpdatedSuccessfully:
      description: "Updated successfully"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
              msg:
                type: string
                example: project updated successfully

    projectNotFound:
      description: "Project not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
                example: false
              msg:
                type: string
                example: "project not found"

    getAllProjects:
      description: "It shows a list with all the projects"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
              prev:
                type: string
              next:
                type: string
              results:
                type: array
                example: []

    unauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
                example: false
              msg:
                type: string
                example: A token is required for authentication     

    projectDeletedSuccessfully:
      description: "Deleted successfully"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
              msg:
                type: string
                example: "project with id '6' was deleted successfully"

    projectDetailSuccessfully:                
      description: "Project detail successfully"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
              data:
                type: object